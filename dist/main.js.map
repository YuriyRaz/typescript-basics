{"version":3,"file":"main.js","sourceRoot":"","sources":["../main.ts"],"names":[],"mappings":"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","sourcesContent":["\n\n/**\n *  UTILS  AND TEMPLATES\n */\n\n\n // Images for Simple slider\n const images: string[] = Array(7)\n .fill(1)\n .map((i, index) => `${index + 1}.jpeg`); // [1.jpeg, 2.jpeg ...]\n\n\n// Simple Slider Template\nconst simpleSliderTemplate = (source: string) => `\n   <img src=\"${source}\" alt=\"\" />\n`;\n\nconst createDOMElFromString = (domstring: string): HTMLElement => {\n const html = new DOMParser().parseFromString(domstring, \"text/html\");\n return <HTMLElement>html.body.firstChild;\n};\n\n// Slider Classes\nabstract class BaseSlider {\n protected imagePath = \"./assets/\";\n\n public currentIndex = 0;\n public el: HTMLElement;\n protected slides: HTMLElement[] = [];\n\n // TODO: add union type for slides\n abstract addSlides(slides: string[]): void;\n\n constructor(selector: string, private showButtons: boolean = true) {\n   this.el = document.querySelector(selector);\n }\n\n // TODO: next and previous methods need to be fixed\n // when slides index > slides.length you can see empty slide\n\n public next(): void {\n  if (++this.currentIndex > this.slides.length - 1) this.currentIndex = 0;\n  this.showSlide(this.currentIndex);\n }\n\n public previous(): void {\n   if (--this.currentIndex < 0) this.currentIndex = this.slides.length - 1;\n   this.showSlide(this.currentIndex);\n }\n\n protected showSlide(index: number): void {\n   this.slides.forEach((item, i) => {\n     if (index === i) {\n       item.classList.remove(\"is-hidden\");\n       return;\n     }\n\n     item.classList.add(\"is-hidden\");\n   });\n }\n\n private addButtons(): void {\n   const buttonsContainer = document.createElement(\"div\");\n   buttonsContainer.classList.add(\"navigation\");\n   buttonsContainer.classList.add(\"has-text-centered\");\n   buttonsContainer.innerHTML = `\n       <button class=\"prev button is-info\">Previous</button>\n       <button class=\"next button is-info\">Next</button>\n     `;\n\n   const prevButton = buttonsContainer.querySelector(\".prev\");\n   const nextButton = buttonsContainer.querySelector(\".next\");\n   prevButton.addEventListener(\"click\", () => this.previous());\n   nextButton.addEventListener(\"click\", () => this.next());\n\n   this.el.appendChild(buttonsContainer);\n }\n\n public render(): void {\n   this.slides.forEach((item, index) => {\n     item.classList.add('fadeIn'); // adds fadeIn animation\n     if (index !== 0) {\n       item.classList.add(\"is-hidden\");\n     }\n\n     this.el.appendChild(item);\n   });\n   if (this.showButtons) {\n     this.addButtons();\n   }\n }\n}\n\nclass SimpleSlider extends BaseSlider {\n constructor(selector: string, showButtons = true) {\n   super(selector, showButtons);\n }\n\n addSlides(images: string[]) {\n   if (Array.isArray(images)) {\n     const sliderTemplate = (source: string) => {\n       const imgString: string = simpleSliderTemplate(this.imagePath + source);\n       return createDOMElFromString(imgString);\n     };\n\n     this.slides = images.map(source => sliderTemplate(source));\n   }\n }\n}\n\n\n// TODO: add class TextSlide that implements ITextSlide\n// TODO: add elements to textSlides\nconst textSlides: ITextSlide[] = [\n {\n   title: 'Angular',\n   subtitle: 'is awesome'\n },\n {\n   title: 'Typescript',\n   subtitle: 'is awesome',\n   baseClass: 'is-info'\n },\n {\n   title: 'Lorem Ipsum',\n   subtitle: 'dolorem',\n   baseClass: 'is-success'\n }\n];\n// Text Slide interface\ninterface ITextSlide {\n title: string;\n subtitle: string;\n // TODO: add named enum for classes\n baseClass?: \"is-primary\" | \"is-success\" | \"is-info\";\n}\n\nconst textSliderTemplate = (textSlide: ITextSlide) => `\n<section class=\"hero is-medium ${\n textSlide.baseClass ? textSlide.baseClass : \"is-primary\"\n} is-bold\">\n   <div class=\"hero-body\">\n   <div class=\"container\">\n       <h1 class=\"title\">\n       ${textSlide.title}\n       </h1>\n       <h2 class=\"subtitle\">\n       ${textSlide.subtitle}\n       </h2>\n   </div>\n   </div>\n</section>`;\n\n\n// should extend abstract class BaseSlider\nclass TextSlider {\n\n // TODO: finish the method addSlides\n // addSlides(slide: TextSlide[]) {\n // }\n\n // use textSliderTemplate\n}\n\n\nclass AutomaticSlider  {\n // TODO: automatic slider should be the descendant of the SimpleSlider or\n // TextSlider but with automatic slideshow and without buttons\n\n // add next() to the render method\n}\n\n\nconst simpleSlider = new SimpleSlider('.simple-slider');\nsimpleSlider.addSlides(images);\nsimpleSlider.render();\n\n"]}